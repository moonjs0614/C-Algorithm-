//아래 그래프에는 이동 경로마다 기차 비용이 적혀있습니다.
//출발 지점에서 도착지점까지 가장 저렴한 방법으로 이동하려고 합니다.

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <queue>
#include <string>
using namespace std;

int N, T;
struct Edge
{
	int num;
	int cost;
};

struct cmp
{
	bool operator()(Edge a, Edge b)
	{
		return a.cost > b.cost;
	}
};

vector<Edge> v[300000];
int dist[300000];

void input()
{
	cin >> N >> T;
	for (int i = 0; i < T; i++)
	{
		int from, to, cost;
		cin >> from >> to >> cost;
		v[from].push_back({ to, cost });
	}
}

void dijkstra(int st)
{
	priority_queue<Edge, vector<Edge>, cmp> pq;
	pq.push({ st, 0 });
	dist[st] = 0;

	while (!pq.empty())
	{
		Edge now = pq.top();
		pq.pop();

		if (dist[now.num] < now.cost) continue;

		for (int i = 0; i < v[now.num].size(); i++)
		{
			int nextCost = now.cost + v[now.num][i].cost;
			int tar = v[now.num][i].num;
			if (nextCost < dist[tar])
			{
				dist[tar] = nextCost;
				pq.push({ tar, nextCost });
			}
		}
	}
}

int main() {
	//freopen("sample_input.txt", "r", stdin);
	input();

	for (int i = 1; i <= N; i++)
	{
		dist[i] = 21e8;
	}

	dijkstra(0);

	if (dist[N - 1] != 21e8)
	{
		cout << dist[N - 1];
	}
	else
	{
		cout << "impossible";
	}
}
