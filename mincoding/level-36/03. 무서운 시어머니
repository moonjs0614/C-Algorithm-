//시어머니께 죄송한 말씀이지만, 자유로운 생활을 위해 독립을 하기로 결심했습니다.
//산악회 회장 출신인 시어머니는새로 이사를 가더라도,최적의 루트로 우리집에 자주 방문할 것이 분명했습니다.
//따라서 시어머니가 오시기 가장 힘든 곳으로 이사가려고 합니다.
//시어머니는 위, 아래, 왼쪽, 오른쪽 방향으로만 이동할 수 있으며,
//각 칸에 쓰여진 숫자는 해당 위치로 이동했을 때 쌓이는 피로도 수치 입니다.

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <queue>
#include <string>
using namespace std;

int Y, X;
int N;
int map[1001][1001];
int visited[1001][1001];

int dy[4] = { -1, 1, 0, 0 };
int dx[4] = { 0, 0, -1, 1 };

struct Point
{
	int y;
	int x;
	int cost;
};

struct cmp
{
	bool operator()(Point a, Point b)
	{
		return a.cost > b.cost;
	}
};

vector<Point> v[1001];
int dist[1001][1001];

void input()
{
	cin >> Y >> X;
	cin >> N;
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			cin >> map[i][j];
		}
	}
}

void init()
{
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			dist[i][j] = 21e8;
		}
	}
}

void dijkstra(Point st)
{
	priority_queue<Point, vector<Point>, cmp> pq;
	pq.push(st);
	dist[st.y][st.x] = st.cost;
	visited[st.y][st.x] = 1;

	while (!pq.empty())
	{
		Point now = pq.top();
		pq.pop();

		for (int i = 0; i < 4; i++)
		{
			now.cost = dist[now.y][now.x];
			Point next = { 0, };
			next.y = now.y + dy[i];
			next.x = now.x + dx[i];
			next.cost = map[next.y][next.x];

			if (next.y < 0 or next.x < 0 or next.y >= N or next.x >= N) continue;
			if (map[next.y][next.x] == -1) continue;
			if (visited[next.y][next.x] == 1) continue;

			dist[next.y][next.x] = now.cost+next.cost;
			visited[next.y][next.x] = 1;

			pq.push(next);
		}
		
	}
}

int main() {
	//freopen("sample_input.txt", "r", stdin);
	input();

	Point st = { 0, };
	st.y = Y;
	st.x = X;
	st.cost = map[st.y][st.x];

	dijkstra(st);

	int maxVal = 0;
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			if (dist[i][j] > maxVal)
			{
				maxVal = dist[i][j];
			}
		}
	}

	cout << maxVal;
}
