//코딩프로는 알고리즘 문제들을 풀어볼 수 있는 문제 풀이 사이트이다.
//여기서 활발하게 활동하던 N명의 학생들이 온라인상에서 같이 문제를 풀며 친분을 쌓았다.
//N명의 학생들은 날짜를 잡아 오프라인 모임을 가지기로 하였다.

//이들은 모두 각각 다른 마을에 살고 있어, N개의 마을 중 하나를 랜덤으로 선택한 마을 P에서 만나기로 하였다.
//이 마을들 사이에는 총 M개의 단방향 도로들이 존재한다. 그리고 각 도로들을 지나는 데에는 특정 시간이 소비된다.
//모임을 가지게 될 마을 P가 선택되면, 모든 학생들은 P마을까지 이동하고, 그리고 다시 자신의 마을로 돌아와야 한다.
//단, 마을을 잇는 도로들은 단방향이기 때문에, 각자의 마을에서 P마을로 가는 길과 P마을에서 다시 자신의 마을로 이동하는 경로는 다를 수 있다.

//매일 알고리즘 문제들을 푸는데에 지치고 체력이 약해진 학생들은 최단 시간으로 이동할 수 있는 루트로 이동한다.
//자신의 마을에서 P마을까지 왔다가 다시 돌아가는데에 가장 많은 시간을 소비한 학생을 배려하여 모임에서 먹을 치킨 값을 빼주려고 한다.
//치킨 값을 면제 받을 수 있는 학생은 누구인지 구하는 프로그램을 작성하라.

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <queue>
#include <string>
using namespace std;

int N, M, P;
struct Edge
{
	int num;
	int cost;
};

struct cmp
{
	bool operator()(Edge a, Edge b)
	{
		return a.cost > b.cost;
	}
};

vector<Edge> v[1001];
int dist[1001];

void input()
{
	cin >> N >> M >> P;
	for (int i = 0; i < M; i++)
	{
		int from, to, cost;
		cin >> from >> to >> cost;
		v[from].push_back({ to, cost });
	}
}

void init()
{
	for (int i = 1; i <= N; i++)
	{
		dist[i] = 21e8;
	}
}

void dijkstra(int st)
{
	priority_queue<Edge, vector<Edge>, cmp> pq;
	pq.push({ st, 0 });
	dist[st] = 0;

	while (!pq.empty())
	{
		Edge now = pq.top();
		pq.pop();

		if (dist[now.num] < now.cost) continue;

		for (int i = 0; i < v[now.num].size(); i++)
		{
			int nextCost = now.cost + v[now.num][i].cost;
			int tar = v[now.num][i].num;
			if (nextCost < dist[tar])
			{
				dist[tar] = nextCost;
				pq.push({ tar, nextCost });
			}
		}
	}
}

int main() {
	//freopen("sample_input.txt", "r", stdin);
	input();

	int to_P[1001];
	int from_P[1001];

	for (int i = 1; i <= N; i++)
	{
		if (i == P)
		{
			init();
			dijkstra(i);
			for (int j = 1; j <= N; j++)
			{
				from_P[j] = dist[j];
			}
		}
		else
		{
			init();
			dijkstra(i);
			to_P[i] = dist[P];
		}
	}

	int maxVal = 0;
	int maxIdx = 0;

	for (int i = 1; i <= N; i++)
	{
		int sum = to_P[i] + from_P[i];
		if (sum > maxVal)
		{
			maxVal = sum;
			maxIdx = i;
		}
	}
	cout << maxVal;

}
